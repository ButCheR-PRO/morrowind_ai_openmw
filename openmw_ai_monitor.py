#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import re
import requests
import threading
from pathlib import Path
from datetime import datetime

class OpenMWAIMonitor:
    def __init__(self):
        self.ai_server_url = "http://127.0.0.1:8080/api/dialogue"
        self.openmw_log_path = None  # –ü—É—Ç—å –∫ –ª–æ–≥—É OpenMW
        self.last_position = 0
        
    def find_openmw_log(self):
        """–ü–æ–∏—Å–∫ –ª–æ–≥–∞ OpenMW"""
        possible_paths = [
            Path.home() / "Documents" / "My Games" / "OpenMW" / "openmw.log",
            Path("openmw.log"),
            Path("logs") / "openmw.log"
        ]
        
        for path in possible_paths:
            if path.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ª–æ–≥ OpenMW: {path}")
                return path
                
        print("‚ùå –õ–æ–≥ OpenMW –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def parse_dialogue_from_log(self, line):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∞–ª–æ–≥–æ–≤ (—ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        patterns = [
            r'Dialog with (.+): (.+)',  # –î–∏–∞–ª–æ–≥ —Å –ù–ü–°
            r'Player says: (.+)',        # –†–µ–ø–ª–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
            r'NPC (.+) says: (.+)'       # –†–µ–ø–ª–∏–∫–∞ –ù–ü–°
        ]
        
        for pattern in patterns:
            match = re.search(pattern, line)
            if match:
                return match.groups()
        return None
    
    def send_to_ai(self, player_text, npc_name="–ù–ü–°"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            response = requests.post(
                self.ai_server_url,
                json={
                    "session_id": f"openmw_monitor_{int(time.time())}",
                    "text": player_text,
                    "npc_name": npc_name
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('ai_response', '–ú–æ–ª—á–∞–Ω–∏–µ...')
            else:
                return f"–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI: {e}"
    
    def monitor_log_file(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–∞ OpenMW –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.openmw_log_path:
            self.openmw_log_path = self.find_openmw_log()
            if not self.openmw_log_path:
                return
        
        print(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ OpenMW: {self.openmw_log_path}")
        
        try:
            with open(self.openmw_log_path, 'r', encoding='utf-8') as f:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                f.seek(0, 2)
                self.last_position = f.tell()
                
                while True:
                    line = f.readline()
                    if line:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                        dialogue_data = self.parse_dialogue_from_log(line.strip())
                        if dialogue_data:
                            print(f"üìù –ù–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥: {dialogue_data}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
                            if "Player says" in line or len(dialogue_data) >= 2:
                                player_text = dialogue_data[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —Ç–µ–∫—Å—Ç
                                npc_name = dialogue_data[0] if len(dialogue_data) > 1 else "–ù–ü–°"
                                
                                print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ AI: '{player_text}'")
                                ai_response = self.send_to_ai(player_text, npc_name)
                                print(f"üí¨ AI –æ—Ç–≤–µ—Ç: {ai_response}")
                                
                                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–≥—Ä—É
                                self.send_response_to_game(ai_response, npc_name)
                    else:
                        time.sleep(0.1)  # –ñ–¥–µ–º –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def send_response_to_game(self, ai_response, npc_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–≥—Ä—É (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"""
        # –í OpenMW 0.49.0 –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
        # –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–ø—Ç
        response_file = Path("ai_responses") / f"response_{int(time.time())}.txt"
        response_file.parent.mkdir(exist_ok=True)
        
        with open(response_file, 'w', encoding='utf-8') as f:
            f.write(f"NPC: {npc_name}\n")
            f.write(f"RESPONSE: {ai_response}\n")
            f.write(f"TIMESTAMP: {datetime.now().isoformat()}\n")
        
        print(f"üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {response_file}")

def main():
    print("üéÆ OpenMW AI Monitor v1.0")
    print("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–æ–≤ OpenMW –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    monitor = OpenMWAIMonitor()
    
    try:
        monitor.monitor_log_file()
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

if __name__ == "__main__":
    main()
