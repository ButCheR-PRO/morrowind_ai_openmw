#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import requests
import time
import threading
import json
import re
from pathlib import Path
from datetime import datetime
from tkinter import *
from tkinter import ttk, messagebox, simpledialog
import tkinter as tk

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ keyboard –¥–ª—è hotkeys (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    import keyboard
    KEYBOARD_AVAILABLE = True
except ImportError:
    KEYBOARD_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å keyboard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

class MorrowindAIUltimate:
    def __init__(self):
        self.ai_server_url = "http://127.0.0.1:8080/api/dialogue"
        self.status_url = "http://127.0.0.1:8080/api/status"
        self.current_npc = "–ñ–∏—Ç–µ–ª—å –ú–æ—Ä—Ä–æ–≤–∏–Ω–¥–∞"
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ù–ü–°
        self.npc_history = []
        self.dialogue_history = []
        self.max_history = 20
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ OpenMW –ª–æ–≥–æ–≤
        self.log_monitoring = False
        self.log_thread = None
        self.openmw_log_path = None
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.hotkeys_enabled = False
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ü–° –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        self.npc_database = {
            "üè∞ Balmora": [
                "–ì–∞–ª–∞—Å–∞ –û—Ç—Ä–µ–ª–µ—Ç", "–°—Ç—Ä–∞–∂–Ω–∏–∫ –•–ª–∞–∞–ª—É", "–ù–∏–ª–µ–Ω–æ –î–æ—Ä–≤–∞–∏–Ω", "–†–∞–ª–µ–Ω –•–ª–∞–∞–ª—É",
                "–ú–µ–Ω–Ω–∞", "–î—Ä–∞–ª—Å–∞ –ù–µ—Ç—Ö—Ä–∏", "–†–∞'–í–∏—Ä—à–∞–Ω", "–Æ–∂–Ω—ã–π –°—Ç–µ–Ω-–î–∞—Ä", "–ë—ç–ª–ª", 
                "–°—ã–Ω'–î–∞—Ä", "–ú–∏–∫–∞ –•–ª–∞–∞–ª—É", "–¢–æ—Ä–≥–æ–≤–µ—Ü –æ—Ä—É–∂–∏–µ–º", "–¢–æ—Ä–≥–æ–≤–µ—Ü –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"
            ],
            "üåä Vivec": [
                "–ê—Ä–≤–∏–ª –ë–µ–ª–µ—Ç", "–õ–ª–∞—Ä–æ—Å–∞ –û—Ç—Ä–∞–Ω", "–ú–µ—Ä–∞—Å–∞ –û—Ç—Ä–∞–Ω", "–î–∂'–ó–∞—Ä–≥–æ",
                "–¢–∞–Ω–¥–∞", "–í–∏—Å–µ—Ä", "–ù–æ—Ä–¥—Å–∫–∞—è –¢–æ—Ä–≥–æ–≤–∫–∞", "–°—Ç—Ä–∞–∂–Ω–∏–∫ –û—Ä–¥–∏–Ω–∞—Ç–æ—Ä"
            ],
            "‚õ∞Ô∏è Ald'ruhn": [
                "–ù–µ–∫—Ä–µ—à–∞ –û—Ç—Ä–µ–ª", "–ë—Ä–∞—Ä–∞ –ú–æ—Ä–æ–¥–∏", "–§–∞–ª–µ–Ω –ê—Ä–µ–ª", "–õ–ª–µ—Ä–æ—Å –°–∞—Ä–∞–Ω",
                "–í–∏—Ä–∞–Ω–∞ –û—Ç—Ä–∞–Ω", "–°—Ç—Ä–∞–∂–Ω–∏–∫ –†–µ–¥–æ—Ä–∞–Ω"
            ],
            "üî• Sadrith Mora": [
                "–ú–∞—Å—Ç–µ—Ä –ê—Ä–∏–æ–Ω", "–§–∞—Å—Ç—Ä–µ–Ω –û—Ç—Ä–µ–ª", "–¢–µ–ª–≤–∞–Ω–Ω–∏ –ú–∞–≥", "–ù–µ–≤–µ–Ω –û–≤–µ–ª—å"
            ],
            "‚≠ê –ß–∞—Å—Ç—ã–µ": [
                "–°—Ç—Ä–∞–∂–Ω–∏–∫", "–¢–æ—Ä–≥–æ–≤–µ—Ü", "–ñ–∏—Ç–µ–ª—å –ú–æ—Ä—Ä–æ–≤–∏–Ω–¥–∞", "–ù–ü–°", "–ü–∏–ª–∏–≥—Ä–∏–º"
            ]
        }
        
        self.setup_gui()
        self.check_ai_connection()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if KEYBOARD_AVAILABLE:
            self.setup_hotkeys()

    def setup_gui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ GUI —Å —Ç–∞–±–∞–º–∏"""
        self.root = tk.Tk()
        self.root.title("üéÆ Morrowind AI Ultimate v2.0")
        self.root.geometry("800x700")
        self.root.configure(bg='#2a1810')
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        main_title = Label(self.root,
                          text="üéÆ MORROWIND AI ULTIMATE",
                          font=("Arial", 16, "bold"),
                          bg='#2a1810', fg='#d4af37')
        main_title.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_frame = Frame(self.root, bg='#2a1810')
        self.status_frame.pack(fill=X, padx=10, pady=5)
        
        self.status_label = Label(self.status_frame,
                                 text="üîÑ –ü—Ä–æ–≤–µ—Ä—è—é AI —Å–µ—Ä–≤–µ—Ä...",
                                 font=("Arial", 10),
                                 bg='#2a1810', fg='#ffffff')
        self.status_label.pack(side=LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        reconnect_btn = Button(self.status_frame,
                              text="üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                              command=self.check_ai_connection,
                              font=("Arial", 8),
                              bg='#654321', fg='#ffffff')
        reconnect_btn.pack(side=RIGHT)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±—ã
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–∞–±–æ–≤
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TNotebook', background='#2a1810')
        style.configure('TNotebook.Tab', background='#654321', foreground='#ffffff')
        style.map('TNotebook.Tab', background=[('selected', '#d4af37')])
        
        # –¢–∞–± 1: –ë—ã—Å—Ç—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏
        self.create_quick_dialog_tab()
        
        # –¢–∞–± 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —á–∞—Ç
        self.create_advanced_chat_tab()
        
        # –¢–∞–± 3: –ò—Å—Ç–æ—Ä–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.create_history_tab()
        
        # –¢–∞–± 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.create_monitoring_tab()

    def create_quick_dialog_tab(self):
        """–¢–∞–± –±—ã—Å—Ç—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ù–ü–°"""
        quick_frame = Frame(self.notebook, bg='#2a1810')
        self.notebook.add(quick_frame, text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏")
        
        # –¢–µ–∫—É—â–∏–π –ù–ü–°
        current_frame = Frame(quick_frame, bg='#2a1810')
        current_frame.pack(fill=X, padx=10, pady=10)
        
        Label(current_frame, text="–¢–µ–∫—É—â–∏–π –ù–ü–°:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 12, "bold")).pack(anchor=W)
        
        self.current_npc_label = Label(current_frame, text=self.current_npc,
                                      font=("Arial", 14, "bold"),
                                      bg='#2a1810', fg='#00ff00')
        self.current_npc_label.pack(anchor=W)
        
        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ù–ü–°
        npc_selection_frame = Frame(quick_frame, bg='#2a1810')
        npc_selection_frame.pack(fill=X, padx=10, pady=10)
        
        Label(npc_selection_frame, text="–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ù–ü–°:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 12)).pack(anchor=W)
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ù–ü–° –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_name, npcs in self.npc_database.items():
            group_frame = LabelFrame(npc_selection_frame, text=group_name,
                                   bg='#2a1810', fg='#d4af37', font=("Arial", 10))
            group_frame.pack(fill=X, pady=5)
            
            buttons_frame = Frame(group_frame, bg='#2a1810')
            buttons_frame.pack(fill=X, padx=5, pady=5)
            
            for i, npc in enumerate(npcs):
                if i >= 6:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 6 –≤ –≥—Ä—É–ø–ø–µ
                    break
                btn = Button(buttons_frame, text=npc,
                           command=lambda n=npc: self.select_npc(n),
                           font=("Arial", 8),
                           bg='#654321', fg='#ffffff',
                           activebackground='#d4af37')
                btn.pack(side=LEFT, padx=2, pady=2, fill=X, expand=True)
        
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ù–ü–°
        manual_frame = Frame(quick_frame, bg='#2a1810')
        manual_frame.pack(fill=X, padx=10, pady=10)
        
        Label(manual_frame, text="–ò–ª–∏ –≤–≤–µ–¥–∏ –∏–º—è –ù–ü–°:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 11)).pack(anchor=W)
        
        entry_frame = Frame(manual_frame, bg='#2a1810')
        entry_frame.pack(fill=X, pady=5)
        
        self.npc_entry = Entry(entry_frame, font=("Arial", 12),
                              bg='#3a2820', fg='#ffffff',
                              insertbackground='#d4af37')
        self.npc_entry.pack(side=LEFT, fill=X, expand=True)
        
        set_npc_btn = Button(entry_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å",
                           command=self.set_manual_npc,
                           font=("Arial", 10),
                           bg='#8b4513', fg='#ffffff')
        set_npc_btn.pack(side=RIGHT, padx=(5, 0))
        
        # –ü–æ–ª–µ –¥–∏–∞–ª–æ–≥–∞
        dialog_frame = Frame(quick_frame, bg='#2a1810')
        dialog_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        Label(dialog_frame, text="–¢–≤–æ—è —Ä–µ–ø–ª–∏–∫–∞:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 12)).pack(anchor=W)
        
        self.quick_dialog_text = Text(dialog_frame, height=4, font=("Arial", 11),
                                     bg='#3a2820', fg='#ffffff',
                                     insertbackground='#d4af37')
        self.quick_dialog_text.pack(fill=X, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = Frame(dialog_frame, bg='#2a1810')
        action_frame.pack(fill=X, pady=5)
        
        send_btn = Button(action_frame, text="ü§ñ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ò–ò",
                         command=self.send_quick_dialog,
                         font=("Arial", 12, "bold"),
                         bg='#8b4513', fg='#ffffff',
                         activebackground='#d4af37')
        send_btn.pack(side=LEFT, padx=(0, 5))
        
        clear_btn = Button(action_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                          command=lambda: self.quick_dialog_text.delete("1.0", "end"),
                          font=("Arial", 10),
                          bg='#654321', fg='#ffffff')
        clear_btn.pack(side=LEFT)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        Label(dialog_frame, text="–û—Ç–≤–µ—Ç –ò–ò:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 12)).pack(anchor=W, pady=(10, 0))
        
        self.quick_response_text = Text(dialog_frame, height=8, font=("Arial", 11),
                                       bg='#1a1010', fg='#d4af37',
                                       state=DISABLED, wrap=WORD)
        self.quick_response_text.pack(fill=BOTH, expand=True, pady=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à
        self.quick_dialog_text.bind('<Control-Return>', lambda e: self.send_quick_dialog())
        self.npc_entry.bind('<Return>', lambda e: self.set_manual_npc())

    def create_advanced_chat_tab(self):
        """–¢–∞–± –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —á–∞—Ç–∞"""
        chat_frame = Frame(self.notebook, bg='#2a1810')
        self.notebook.add(chat_frame, text="üí¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —á–∞—Ç")
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        chat_container = Frame(chat_frame, bg='#2a1810')
        chat_container.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        Label(chat_container, text="–ß–∞—Ç —Å Morrowind AI:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 14, "bold")).pack(anchor=W)
        
        # –°–æ–∑–¥–∞—ë–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        chat_scroll_frame = Frame(chat_container, bg='#2a1810')
        chat_scroll_frame.pack(fill=BOTH, expand=True, pady=10)
        
        chat_scrollbar = Scrollbar(chat_scroll_frame)
        chat_scrollbar.pack(side=RIGHT, fill=Y)
        
        self.chat_text = Text(chat_scroll_frame, font=("Arial", 11),
                             bg='#1a1010', fg='#ffffff', wrap=WORD,
                             yscrollcommand=chat_scrollbar.set,
                             state=DISABLED)
        self.chat_text.pack(side=LEFT, fill=BOTH, expand=True)
        chat_scrollbar.config(command=self.chat_text.yview)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞
        chat_input_frame = Frame(chat_container, bg='#2a1810')
        chat_input_frame.pack(fill=X, pady=10)
        
        Label(chat_input_frame, text="–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
              bg='#2a1810', fg='#d4af37', font=("Arial", 11)).pack(anchor=W)
        
        input_container = Frame(chat_input_frame, bg='#2a1810')
        input_container.pack(fill=X, pady=5)
        
        self.chat_input = Entry(input_container, font=("Arial", 12),
                               bg='#3a2820', fg='#ffffff',
                               insertbackground='#d4af37')
        self.chat_input.pack(side=LEFT, fill=X, expand=True)
        
        send_chat_btn = Button(input_container, text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                              command=self.send_chat_message,
                              font=("Arial", 11),
                              bg='#8b4513', fg='#ffffff')
        send_chat_btn.pack(side=RIGHT, padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
        chat_controls = Frame(chat_container, bg='#2a1810')
        chat_controls.pack(fill=X, pady=5)
        
        clear_chat_btn = Button(chat_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç",
                               command=self.clear_chat,
                               font=("Arial", 10),
                               bg='#654321', fg='#ffffff')
        clear_chat_btn.pack(side=LEFT)
        
        save_chat_btn = Button(chat_controls, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç",
                              command=self.save_chat,
                              font=("Arial", 10),
                              bg='#654321', fg='#ffffff')
        save_chat_btn.pack(side=LEFT, padx=(5, 0))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.chat_input.bind('<Return>', lambda e: self.send_chat_message())

    def create_history_tab(self):
        """–¢–∞–± –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        history_frame = Frame(self.notebook, bg='#2a1810')
        self.notebook.add(history_frame, text="üìö –ò—Å—Ç–æ—Ä–∏—è")
        
        # –ò—Å—Ç–æ—Ä–∏—è –ù–ü–°
        npc_hist_frame = LabelFrame(history_frame, text="–ò—Å—Ç–æ—Ä–∏—è –ù–ü–°",
                                   bg='#2a1810', fg='#d4af37', font=("Arial", 12))
        npc_hist_frame.pack(fill=X, padx=10, pady=10)
        
        self.npc_history_listbox = Listbox(npc_hist_frame, height=6,
                                          bg='#3a2820', fg='#ffffff',
                                          selectbackground='#d4af37',
                                          font=("Arial", 10))
        self.npc_history_listbox.pack(fill=X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ù–ü–°
        npc_hist_controls = Frame(npc_hist_frame, bg='#2a1810')
        npc_hist_controls.pack(fill=X, padx=5, pady=5)
        
        select_from_hist_btn = Button(npc_hist_controls, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏",
                                     command=self.select_npc_from_history,
                                     font=("Arial", 9),
                                     bg='#654321', fg='#ffffff')
        select_from_hist_btn.pack(side=LEFT)
        
        clear_npc_hist_btn = Button(npc_hist_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ù–ü–°",
                                   command=self.clear_npc_history,
                                   font=("Arial", 9),
                                   bg='#654321', fg='#ffffff')
        clear_npc_hist_btn.pack(side=RIGHT)
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        dialog_hist_frame = LabelFrame(history_frame, text="–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤",
                                      bg='#2a1810', fg='#d4af37', font=("Arial", 12))
        dialog_hist_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        dialog_container = Frame(dialog_hist_frame, bg='#2a1810')
        dialog_container.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        dialog_scroll = Scrollbar(dialog_container)
        dialog_scroll.pack(side=RIGHT, fill=Y)
        
        self.dialog_history_text = Text(dialog_container, font=("Arial", 9),
                                       bg='#1a1010', fg='#ffffff', wrap=WORD,
                                       yscrollcommand=dialog_scroll.set,
                                       state=DISABLED)
        self.dialog_history_text.pack(side=LEFT, fill=BOTH, expand=True)
        dialog_scroll.config(command=self.dialog_history_text.yview)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤
        dialog_hist_controls = Frame(dialog_hist_frame, bg='#2a1810')
        dialog_hist_controls.pack(fill=X, padx=5, pady=5)
        
        save_history_btn = Button(dialog_hist_controls, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                                 command=self.save_dialog_history,
                                 font=("Arial", 9),
                                 bg='#654321', fg='#ffffff')
        save_history_btn.pack(side=LEFT)
        
        clear_dialog_hist_btn = Button(dialog_hist_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                                      command=self.clear_dialog_history,
                                      font=("Arial", 9),
                                      bg='#654321', fg='#ffffff')
        clear_dialog_hist_btn.pack(side=RIGHT)

    def create_monitoring_tab(self):
        """–¢–∞–± –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        monitoring_frame = Frame(self.notebook, bg='#2a1810')
        self.notebook.add(monitoring_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        hotkey_frame = LabelFrame(monitoring_frame, text="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏",
                                 bg='#2a1810', fg='#d4af37', font=("Arial", 12))
        hotkey_frame.pack(fill=X, padx=10, pady=10)
        
        if KEYBOARD_AVAILABLE:
            hotkey_status = Label(hotkey_frame, text="‚úÖ –ú–æ–¥—É–ª—å keyboard –¥–æ—Å—Ç—É–ø–µ–Ω",
                                 bg='#2a1810', fg='#00ff00', font=("Arial", 10))
            hotkey_status.pack(anchor=W, padx=5, pady=5)
            
            hotkey_info = Label(hotkey_frame,
                               text="üî• Ctrl+Alt+A - –ë—ã—Å—Ç—Ä—ã–π –¥–∏–∞–ª–æ–≥ —Å –ò–ò\n"
                                    "üî• Ctrl+Alt+C - –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç\n"
                                    "üî• Ctrl+Alt+Q - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                               bg='#2a1810', fg='#ffffff', font=("Arial", 9),
                               justify=LEFT)
            hotkey_info.pack(anchor=W, padx=5, pady=5)
            
            self.hotkey_toggle_btn = Button(hotkey_frame, text="üéØ –í–∫–ª—é—á–∏—Ç—å hotkeys",
                                           command=self.toggle_hotkeys,
                                           font=("Arial", 10),
                                           bg='#8b4513', fg='#ffffff')
            self.hotkey_toggle_btn.pack(padx=5, pady=5)
        else:
            hotkey_error = Label(hotkey_frame, text="‚ùå –ú–æ–¥—É–ª—å keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                                bg='#2a1810', fg='#ff0000', font=("Arial", 10))
            hotkey_error.pack(anchor=W, padx=5, pady=5)
            
            install_info = Label(hotkey_frame,
                                text="–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à:\npip install keyboard",
                                bg='#2a1810', fg='#ffffff', font=("Arial", 9))
            install_info.pack(anchor=W, padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–µ—Ä–≤–µ—Ä–∞
        ai_settings_frame = LabelFrame(monitoring_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–µ—Ä–≤–µ—Ä–∞",
                                      bg='#2a1810', fg='#d4af37', font=("Arial", 12))
        ai_settings_frame.pack(fill=X, padx=10, pady=10)
        
        Label(ai_settings_frame, text="URL AI —Å–µ—Ä–≤–µ—Ä–∞:",
              bg='#2a1810', fg='#ffffff', font=("Arial", 10)).pack(anchor=W, padx=5)
        
        self.ai_url_entry = Entry(ai_settings_frame, font=("Arial", 10),
                                 bg='#3a2820', fg='#ffffff')
        self.ai_url_entry.insert(0, self.ai_server_url)
        self.ai_url_entry.pack(fill=X, padx=5, pady=5)
        
        update_url_btn = Button(ai_settings_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å URL",
                               command=self.update_ai_url,
                               font=("Arial", 9),
                               bg='#654321', fg='#ffffff')
        update_url_btn.pack(padx=5, pady=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = LabelFrame(monitoring_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                bg='#2a1810', fg='#d4af37', font=("Arial", 12))
        stats_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        self.stats_text = Text(stats_frame, height=8, font=("Arial", 9),
                              bg='#1a1010', fg='#ffffff',
                              state=DISABLED)
        self.stats_text.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        refresh_stats_btn = Button(stats_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                                  command=self.update_stats,
                                  font=("Arial", 9),
                                  bg='#654321', fg='#ffffff')
        refresh_stats_btn.pack(pady=5)

    def select_npc(self, npc_name):
        """–í—ã–±–æ—Ä –ù–ü–° –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.current_npc = npc_name
        self.current_npc_label.config(text=npc_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if npc_name in self.npc_history:
            self.npc_history.remove(npc_name)
        self.npc_history.insert(0, npc_name)
        self.npc_history = self.npc_history[:self.max_history]
        
        self.update_npc_history_display()
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ù–ü–°: {npc_name}")

    def set_manual_npc(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ù–ü–° –≤—Ä—É—á–Ω—É—é"""
        npc_name = self.npc_entry.get().strip()
        if npc_name:
            self.select_npc(npc_name)
            self.npc_entry.delete(0, END)

    def send_quick_dialog(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        user_text = self.quick_dialog_text.get("1.0", "end-1c").strip()
        
        if not user_text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞!")
            return
        
        self.send_to_ai(user_text, self.current_npc, self.quick_response_text)
        self.quick_dialog_text.delete("1.0", "end")

    def send_chat_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        user_text = self.chat_input.get().strip()
        
        if not user_text:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        self.add_to_chat(f"üó®Ô∏è –¢—ã: {user_text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI
        try:
            response = requests.post(
                self.ai_server_url,
                json={
                    "session_id": f"chat_{int(time.time())}",
                    "text": user_text,
                    "npc_name": self.current_npc
                },
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                ai_response = data.get('ai_response', '–ú–æ–ª—á–∞–Ω–∏–µ...')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ —á–∞—Ç
                self.add_to_chat(f"ü§ñ {self.current_npc}: {ai_response}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
                self.add_to_dialogue_history(user_text, ai_response, self.current_npc)
                
            else:
                self.add_to_chat(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                
        except Exception as e:
            self.add_to_chat(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        self.chat_input.delete(0, END)

    def send_to_ai(self, user_text, npc_name, response_widget):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ AI"""
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: '{user_text}' –¥–ª—è {npc_name}")
            
            response = requests.post(
                self.ai_server_url,
                json={
                    "session_id": f"ultimate_{int(time.time())}",
                    "text": user_text,
                    "npc_name": npc_name
                },
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                ai_response = data.get('ai_response', '–ú–æ–ª—á–∞–Ω–∏–µ...')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                response_widget.config(state=NORMAL)
                response_widget.delete("1.0", "end")
                response_widget.insert("1.0", f"ü§ñ {npc_name}:\n\n{ai_response}")
                response_widget.config(state=DISABLED)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_to_dialogue_history(user_text, ai_response, npc_name)
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {npc_name}")
                
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
                response_widget.config(state=NORMAL)
                response_widget.delete("1.0", "end")
                response_widget.insert("1.0", error_msg)
                response_widget.config(state=DISABLED)
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
            response_widget.config(state=NORMAL)
            response_widget.delete("1.0", "end")
            response_widget.insert("1.0", error_msg)
            response_widget.config(state=DISABLED)

    def add_to_chat(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        self.chat_text.config(state=NORMAL)
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.chat_text.insert(END, f"[{timestamp}] {message}\n\n")
        self.chat_text.see(END)
        self.chat_text.config(state=DISABLED)

    def add_to_dialogue_history(self, user_text, ai_response, npc_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        dialogue_entry = {
            "timestamp": timestamp,
            "user": user_text,
            "ai": ai_response,
            "npc": npc_name
        }
        
        self.dialogue_history.insert(0, dialogue_entry)
        self.dialogue_history = self.dialogue_history[:self.max_history]
        
        self.update_dialogue_history_display()

    def update_npc_history_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ù–ü–°"""
        self.npc_history_listbox.delete(0, END)
        for npc in self.npc_history:
            self.npc_history_listbox.insert(END, npc)

    def update_dialogue_history_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        self.dialog_history_text.config(state=NORMAL)
        self.dialog_history_text.delete("1.0", "end")
        
        for entry in self.dialogue_history:
            self.dialog_history_text.insert(END, 
                f"[{entry['timestamp']}] —Å {entry['npc']}\n"
                f"üó®Ô∏è –¢—ã: {entry['user']}\n"
                f"ü§ñ –ò–ò: {entry['ai']}\n"
                f"{'-'*50}\n\n")
        
        self.dialog_history_text.config(state=DISABLED)

    def select_npc_from_history(self):
        """–í—ã–±–æ—Ä –ù–ü–° –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selection = self.npc_history_listbox.curselection()
        if selection:
            npc_name = self.npc_history_listbox.get(selection[0])
            self.select_npc(npc_name)

    def clear_npc_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ù–ü–°"""
        self.npc_history.clear()
        self.update_npc_history_display()

    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        self.chat_text.config(state=NORMAL)
        self.chat_text.delete("1.0", "end")
        self.chat_text.config(state=DISABLED)

    def clear_dialog_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        self.dialogue_history.clear()
        self.update_dialogue_history_display()

    def save_chat(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"morrowind_ai_chat_{timestamp}.txt"
            
            chat_content = self.chat_text.get("1.0", "end-1c")
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"=== Morrowind AI Chat - {timestamp} ===\n\n")
                f.write(chat_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç: {e}")

    def save_dialog_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"morrowind_ai_history_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.dialogue_history, f, ensure_ascii=False, indent=2)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

    def check_ai_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            response = requests.get(self.status_url, timeout=5)
            if response.status_code == 200:
                data = response.json()
                gemini_available = data.get('gemini_available', False)
                
                if gemini_available:
                    self.status_label.config(text="üü¢ AI —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ (Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç)", fg='#00ff00')
                else:
                    self.status_label.config(text="üü° AI —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)", fg='#ffff00')
            else:
                self.status_label.config(text="üü° AI —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏", fg='#ffff00')
        except:
            self.status_label.config(text="üî¥ AI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", fg='#ff0000')

    def update_ai_url(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL AI —Å–µ—Ä–≤–µ—Ä–∞"""
        new_url = self.ai_url_entry.get().strip()
        if new_url:
            self.ai_server_url = new_url
            self.status_url = new_url.replace('/dialogue', '/status')
            self.check_ai_connection()
            print(f"‚úÖ URL –æ–±–Ω–æ–≤–ª–µ–Ω: {new_url}")

    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_text.config(state=NORMAL)
        self.stats_text.delete("1.0", "end")
        
        stats = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Morrowind AI Ultimate:

üé≠ –ù–ü–° –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.npc_history)}
üí¨ –î–∏–∞–ª–æ–≥–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.dialogue_history)}
ü§ñ –¢–µ–∫—É—â–∏–π –ù–ü–°: {self.current_npc}
‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if self.hotkeys_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}
üîó AI —Å–µ—Ä–≤–µ—Ä: {self.ai_server_url}

üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ù–ü–°:
"""
        
        for i, npc in enumerate(self.npc_history[:5]):
            stats += f"  {i+1}. {npc}\n"
        
        if self.dialogue_history:
            last_dialog = self.dialogue_history[0]
            stats += f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥: {last_dialog['timestamp']}\n"
            stats += f"   —Å {last_dialog['npc']}"
        
        self.stats_text.insert("1.0", stats)
        self.stats_text.config(state=DISABLED)

    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        if not KEYBOARD_AVAILABLE:
            return
        
        try:
            keyboard.add_hotkey('ctrl+alt+a', self.hotkey_quick_dialog)
            keyboard.add_hotkey('ctrl+alt+c', self.hotkey_open_chat)
            keyboard.add_hotkey('ctrl+alt+q', self.hotkey_quit)
            print("‚úÖ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")

    def toggle_hotkeys(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        if not KEYBOARD_AVAILABLE:
            return
        
        if self.hotkeys_enabled:
            keyboard.unhook_all()
            self.hotkeys_enabled = False
            self.hotkey_toggle_btn.config(text="üéØ –í–∫–ª—é—á–∏—Ç—å hotkeys")
            print("‚ùå –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        else:
            self.setup_hotkeys()
            self.hotkeys_enabled = True
            self.hotkey_toggle_btn.config(text="üö´ –û—Ç–∫–ª—é—á–∏—Ç—å hotkeys")
            print("‚úÖ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤–∫–ª—é—á–µ–Ω—ã")

    def hotkey_quick_dialog(self):
        """–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± –±—ã—Å—Ç—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            self.notebook.select(0)
            
            # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            self.root.lift()
            self.root.focus_force()
            
            # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.quick_dialog_text.focus_set()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ hotkey: {e}")

    def hotkey_open_chat(self):
        """–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞"""
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± —á–∞—Ç–∞
            self.notebook.select(1)
            
            # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            self.root.lift()
            self.root.focus_force()
            
            # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞
            self.chat_input.focus_set()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ hotkey: {e}")

    def hotkey_quit(self):
        """–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –≤—ã—Ö–æ–¥–∞"""
        self.quit_app()

    def quit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if KEYBOARD_AVAILABLE and self.hotkeys_enabled:
            keyboard.unhook_all()
        
        self.root.quit()
        self.root.destroy()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.update_npc_history_display()
        self.update_stats()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
        try:
            self.root.protocol("WM_DELETE_WINDOW", self.quit_app)
            self.root.mainloop()
        except KeyboardInterrupt:
            self.quit_app()

def main():
    print("üéÆ –ó–∞–ø—É—Å–∫ Morrowind AI Ultimate v2.0...")
    print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è AI –¥–∏–∞–ª–æ–≥–æ–≤ –≤ Morrowind")
    print("=" * 60)
    
    try:
        app = MorrowindAIUltimate()
        app.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
