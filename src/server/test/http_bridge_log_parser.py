#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
============================================================================
Morrowind AI Log Parser v1.3
–ü–∞—Ä—Å–µ—Ä –ª–æ–≥–æ–≤ OpenMW –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤
============================================================================
"""

import os
import sys
import re
import time
import json
import asyncio
import aiohttp
from threading import Thread
from pathlib import Path
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def ensure_log_directory():
    current_dir = Path(__file__).parent
    root_dir = current_dir.parent.parent.parent
    log_dir = root_dir / 'logs'
    log_dir.mkdir(parents=True, exist_ok=True)
    return log_dir

log_directory = ensure_log_directory()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(log_directory / 'log_parser.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class OpenMWLogParser:
    def __init__(self):
        self.config = {
            'ai_server_host': 'localhost',
            'ai_server_port': 9090,
            'http_server_port': 8080,
            'log_file': 'f:/Games/MorrowindFullrest/game/openmw.log',  # –ü—É—Ç—å –∫ –ª–æ–≥—É OpenMW
            'request_pattern': r'\[AI_REQUEST\]\s+ID:([^|]+)\|NPC:([^|]+)\|MSG:([^|]+)\|CTX:([^|]+)\|TIME:(\d+)',
            'check_interval': 1.0,
        }
        
        self.is_running = False
        self.processed_requests = set()
        self.last_position = 0
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ª–æ–≥–æ–≤"""
        logger.info("=" * 60)
        logger.info("üìù MORROWIND AI LOG PARSER –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...")
        logger.info(f"üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª–æ–≥: {self.config['log_file']}")
        logger.info("=" * 60)
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = Thread(target=self.log_monitor_loop, daemon=True)
        monitor_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        try:
            asyncio.run(self.start_http_server())
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.is_running = False
        logger.info("üõë Log Parser –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def log_monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ OpenMW"""
        logger.info("üëÅÔ∏è –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ OpenMW...")
        
        while self.is_running:
            try:
                self.check_log_for_requests()
                time.sleep(self.config['check_interval'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ª–æ–≥–æ–≤: {e}")
                time.sleep(1)
                
    def check_log_for_requests(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ AI –∑–∞–ø—Ä–æ—Å—ã –≤ –ª–æ–≥–∞—Ö OpenMW"""
        log_file = self.config['log_file']
        
        if not os.path.exists(log_file):
            return
            
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                # –ß–∏—Ç–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
                f.seek(self.last_position)
                new_lines = f.readlines()
                self.last_position = f.tell()
                
                for line in new_lines:
                    self.parse_ai_request(line.strip())
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            
    def parse_ai_request(self, line):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
        pattern = self.config['request_pattern']
        match = re.search(pattern, line)
        
        if match:
            request_id = match.group(1)
            npc_name = match.group(2)
            message = match.group(3)
            context = match.group(4)
            timestamp = int(match.group(5))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if request_id in self.processed_requests:
                return
                
            logger.info("=" * 50)
            logger.info("üì® –ù–û–í–´–ô AI –ó–ê–ü–†–û–° –ò–ó –õ–û–ì–ê OPENMW")
            logger.info(f"ID: {request_id}")
            logger.info(f"–ù–ü–°: {npc_name}")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
            logger.info("=" * 50)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è AI —Å–µ—Ä–≤–µ—Ä–∞
            request_data = {
                'request_id': request_id,
                'npc_name': npc_name,
                'message': message,
                'context': context,
                'timestamp': timestamp,
                'source': 'openmw_log_parser'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä
            asyncio.run(self.send_to_ai_server(request_data))
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.processed_requests.add(request_id)
            
    async def send_to_ai_server(self, request_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä"""
        ai_url = f"http://{self.config['ai_server_host']}:{self.config['ai_server_port']}/api/dialogue"
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'npc_name': request_data.get('npc_name', ''),
                    'message': request_data.get('message', ''),
                    'context': request_data.get('context', ''),
                    'language': 'ru',
                    'game': 'morrowind',
                    'timestamp': request_data.get('timestamp', int(time.time()))
                }
                
                logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä: {ai_url}")
                
                async with session.post(
                    ai_url, 
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        ai_response = await response.json()
                        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI-—Å–µ—Ä–≤–µ—Ä–∞")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è OpenMW (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        self.log_ai_response(ai_response, request_data)
                    else:
                        logger.error(f"‚ùå AI-—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-—Å–µ—Ä–≤–µ—Ä—É: {e}")
            
    def log_ai_response(self, ai_response, original_request):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ OpenMW)"""
        response_message = f"[AI_RESPONSE] ID:{original_request['request_id']}|RESPONSE:{ai_response.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}|STATUS:success"
        logger.info(f"ü§ñ {response_message}")
        
    async def start_http_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        from aiohttp import web
        
        app = web.Application()
        app.router.add_get('/', self.handle_status)
        app.router.add_get('/api/status', self.handle_status)
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, 'localhost', self.config['http_server_port'])
        await site.start()
        
        logger.info(f"üåê HTTP —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.config['http_server_port']}")
        
        try:
            while self.is_running:
                await asyncio.sleep(1)
        finally:
            await runner.cleanup()
            
    async def handle_status(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞"""
        status = {
            'service': 'Morrowind AI Log Parser',
            'version': '1.3',
            'status': 'running' if self.is_running else 'stopped',
            'processed_requests': len(self.processed_requests),
            'log_file': self.config['log_file'],
            'log_position': self.last_position
        }
        
        return web.json_response(status)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìù Morrowind AI Log Parser v1.3")
    print("=" * 40)
    
    parser = OpenMWLogParser()
    parser.start()

if __name__ == "__main__":
    main()
