#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket
import json
import time
import sys
import yaml
import asyncio
import aiohttp
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_path = Path('config.yml')
    
    # –ò—â–µ–º config.yml –≤ —Ç–µ–∫—É—â–µ–π –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    if not config_path.exists():
        for parent in Path.cwd().parents:
            potential_config = parent / 'config.yml'
            if potential_config.exists():
                config_path = potential_config
                break
        else:
            logger.warning("‚ö†Ô∏è config.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {}
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config or {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

def test_tcp_connection(host, port, timeout=5):
    """–¢–µ—Å—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.settimeout(timeout)
        
        start_time = time.time()
        result = client.connect_ex((host, port))
        connect_time = time.time() - start_time
        
        if result == 0:
            print(f"‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –í—Ä–µ–º—è: {connect_time:.3f}—Å")
            client.close()
            return True
        else:
            print(f"‚ùå TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ (–∫–æ–¥: {result})")
            return False
            
    except socket.timeout:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({timeout}—Å)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_socket_message(host, port, timeout=5):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç"""
    print(f"üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç...")
    
    try:
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.settimeout(timeout)
        client.connect((host, port))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = {
            "type": "test_connection",
            "data": "–ü—Ä–∏–≤–µ—Ç –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!",
            "timestamp": time.time()
        }
        
        message_json = json.dumps(test_message, ensure_ascii=False) + "\n"
        client.send(message_json.encode('utf-8'))
        print("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç
        client.settimeout(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        response = client.recv(4096).decode('utf-8')
        
        if response:
            print(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ({len(response)} –±–∞–π—Ç): {response.strip()}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            try:
                response_json = json.loads(response.strip())
                print("‚úÖ –û—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON")
                if isinstance(response_json, dict):
                    for key, value in response_json.items():
                        print(f"   {key}: {value}")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
                
            client.close()
            return True
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
            client.close()
            return False
            
    except socket.timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def test_http_endpoint(url, timeout=10):
    """–¢–µ—Å—Ç HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç: {url}")
    
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            start_time = time.time()
            
            async with session.get(url) as response:
                response_time = time.time() - start_time
                content = await response.text()
                
                print(f"üìä HTTP {response.status} - {len(content)} –±–∞–π—Ç - {response_time:.3f}—Å")
                
                if response.status == 200:
                    print("‚úÖ HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    try:
                        data = await response.json()
                        print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON:")
                        if isinstance(data, dict):
                            for key, value in data.items():
                                if isinstance(value, (str, int, float, bool)):
                                    print(f"   {key}: {value}")
                                else:
                                    print(f"   {key}: {type(value).__name__}")
                    except:
                        print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
                        print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}")
                    
                    return True
                else:
                    print(f"‚ùå HTTP —Å—Ç–∞—Ç—É—Å {response.status}")
                    return False
                    
    except asyncio.TimeoutError:
        print(f"‚ùå HTTP —Ç–∞–π–º–∞—É—Ç ({timeout}—Å)")
        return False
    except aiohttp.ClientError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_http_post(url, data, timeout=10):
    """–¢–µ—Å—Ç HTTP POST –∑–∞–ø—Ä–æ—Å–∞"""
    print(f"üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP POST: {url}")
    
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            start_time = time.time()
            
            async with session.post(url, json=data) as response:
                response_time = time.time() - start_time
                content = await response.text()
                
                print(f"üìä HTTP POST {response.status} - {len(content)} –±–∞–π—Ç - {response_time:.3f}—Å")
                
                if response.status == 200:
                    print("‚úÖ HTTP POST —É—Å–ø–µ—à–µ–Ω")
                    
                    try:
                        response_data = await response.json()
                        print("‚úÖ –û—Ç–≤–µ—Ç JSON:")
                        if isinstance(response_data, dict):
                            for key, value in response_data.items():
                                if isinstance(value, (str, int, float, bool)):
                                    print(f"   {key}: {value}")
                                else:
                                    print(f"   {key}: {type(value).__name__}")
                    except:
                        print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ JSON")
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {content[:200]}")
                    
                    return True
                else:
                    print(f"‚ùå HTTP POST —Å—Ç–∞—Ç—É—Å {response.status}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {content}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP POST: {e}")
        return False

async def test_server():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –°–ï–†–í–ï–†–£")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    rpc_config = config.get('rpc', {})
    host = rpc_config.get('host', '127.0.0.1')
    port = rpc_config.get('port', 8080)
    
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {host}:{port}")
    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–Ω–∞–π–¥–µ–Ω–∞' if config else '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
    
    results = []
    
    # 1. –¢–µ—Å—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print(f"\n1Ô∏è‚É£ TCP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï")
    tcp_result = test_tcp_connection(host, port)
    results.append(("TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", tcp_result))
    
    if not tcp_result:
        print("‚ùå TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print_summary(results)
        return False
    
    # 2. –¢–µ—Å—Ç HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print(f"\n2Ô∏è‚É£ HTTP –≠–ù–î–ü–û–ò–ù–¢–´")
    base_url = f"http://{host}:{port}"
    
    # –¢–µ—Å—Ç /test —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    test_url = f"{base_url}/test"
    http_test_result = await test_http_endpoint(test_url)
    results.append(("HTTP /test", http_test_result))
    
    # –¢–µ—Å—Ç /health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    health_url = f"{base_url}/health"
    http_health_result = await test_http_endpoint(health_url)
    results.append(("HTTP /health", http_health_result))
    
    # 3. –¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ (–¥–∏–∞–ª–æ–≥)
    print(f"\n3Ô∏è‚É£ HTTP POST –¢–ï–°–¢–´")
    dialogue_url = f"{base_url}/dialogue"
    test_dialogue = {
        "npc_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ù–ü–°",
        "player_message": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!",
        "context": {"location": "test"}
    }
    
    dialogue_result = await test_http_post(dialogue_url, test_dialogue)
    results.append(("HTTP POST /dialogue", dialogue_result))
    
    # 4. –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    voice_url = f"{base_url}/voice"
    test_voice = {
        "voice_text": "–¢–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    }
    
    voice_result = await test_http_post(voice_url, test_voice)
    results.append(("HTTP POST /voice", voice_result))
    
    # –°–≤–æ–¥–∫–∞
    print_summary(results)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
    critical_tests = [tcp_result, http_test_result]
    return all(critical_tests)

def print_summary(results):
    """–ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print("=" * 50)
    print(f"üéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.")
    else:
        print("üí• –ü–û–õ–ù–´–ô –ü–†–û–í–ê–õ! –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await test_server()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 2

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        sys.exit(130)
