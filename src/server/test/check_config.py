#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import yaml
import os
import sys
from pathlib import Path

def check_config():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º config.yml...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    config_path = Path('config.yml')
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª config.yml –ù–ï –Ω–∞–π–¥–µ–Ω!")
        print("üìÅ –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", Path.cwd())
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ config.yml –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        for parent in Path.cwd().parents:
            potential_config = parent / 'config.yml'
            if potential_config.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω config.yml –≤: {potential_config}")
                config_path = potential_config
                break
        else:
            return False
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        if config is None:
            print("‚ùå Config.yml –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!")
            return False
            
        print("‚úÖ Config.yml —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {config_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        required_sections = [
            'morrowind_data_files_dir',
            'language', 
            'llm',
            'event_bus',
            'rpc'
        ]
        
        missing_sections = []
        for section in required_sections:
            if section in config:
                print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –Ω–∞–π–¥–µ–Ω–∞")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
                if section == 'morrowind_data_files_dir':
                    data_dir = Path(config[section])
                    if data_dir.exists():
                        print(f"   üìÅ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Morrowind –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {data_dir}")
                    else:
                        print(f"   ‚ö†Ô∏è –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Morrowind –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_dir}")
                
                elif section == 'event_bus':
                    if 'host' in config[section] and 'port' in config[section]:
                        host = config[section]['host']
                        port = config[section]['port']
                        print(f"   üì° Event Bus: {host}:{port}")
                    else:
                        print(f"   ‚ö†Ô∏è –í —Å–µ–∫—Ü–∏–∏ event_bus –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç host –∏–ª–∏ port")
                
                elif section == 'rpc':
                    if 'host' in config[section] and 'port' in config[section]:
                        host = config[section]['host']
                        port = config[section]['port']
                        print(f"   üîå RPC —Å–µ—Ä–≤–µ—Ä: {host}:{port}")
                    else:
                        print(f"   ‚ö†Ô∏è –í —Å–µ–∫—Ü–∏–∏ rpc –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç host –∏–ª–∏ port")
                        
            else:
                print(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                missing_sections.append(section)
        
        if missing_sections:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_sections)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini API –∫–ª—é—á
        if 'llm' in config and 'system' in config['llm']:
            if 'google' in config['llm']['system']:
                api_key = config['llm']['system']['google'].get('api_key', '')
                if api_key and api_key != "–í–ê–®_GEMINI_API_–ö–õ–Æ–ß":
                    print(f"‚úÖ Gemini API –∫–ª—é—á: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print("‚ö†Ô∏è Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                    print("   üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à API –∫–ª—é—á Google Gemini")
            else:
                print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ–∫—Ü–∏–∏ llm.system")
        else:
            print("‚ö†Ô∏è –°–µ–∫—Ü–∏—è llm.system –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'language' in config:
            lang = config['language']
            print(f"üåç –Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã: {lang}")
            if lang not in ['ru', 'en']:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫: {lang}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: ru, en")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ vosk (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'vosk' in config:
            vosk_config = config['vosk']
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VOSK")
            
            if 'model_path' in vosk_config:
                model_path = Path(vosk_config['model_path'])
                if model_path.exists():
                    print(f"   ‚úÖ –ú–æ–¥–µ–ª—å VOSK –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
                else:
                    print(f"   ‚ö†Ô∏è –ú–æ–¥–µ–ª—å VOSK –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ audio (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'audio' in config:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ")
            audio_config = config['audio']
            if 'sample_rate' in audio_config:
                print(f"   üéµ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio_config['sample_rate']} Hz")
        
        print("\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
        
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å YAML")
        return False
    except UnicodeDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ UTF-8")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò MORROWIND AI")
    print("=" * 50)
    
    success = check_config()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
    else:
        print("üí• –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô!")
        print("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    print("=" * 50)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
