#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import yaml
import os
import sys
from pathlib import Path

def check_config():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º config.yml...")
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—É—Ç—å - –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ –æ—Ç src/server/test/)
    config_path = Path(__file__).parent.parent.parent.parent / 'config.yml'
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ - —á–µ—Ä–µ–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    if not config_path.exists():
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        config_path = Path.cwd() / 'config.yml'
    
    # –ï—â—ë –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Å—Ç–∞
    if not config_path.exists():
        # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –æ—Ç —Ç–µ–∫—É—â–µ–π
        current = Path.cwd()
        for _ in range(5):  # –º–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö
            potential_config = current / 'config.yml'
            if potential_config.exists():
                config_path = potential_config
                break
            current = current.parent
    
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª config.yml –ù–ï –Ω–∞–π–¥–µ–Ω!")
        print(f"üìÅ –ò—Å–∫–∞–ª–∏ –≤: {config_path}")
        print("üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", Path.cwd())
        print("üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞:", Path(__file__).parent)
        # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        root_dir = Path(__file__).parent.parent.parent.parent
        if root_dir.exists():
            print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ {root_dir}:")
            for item in root_dir.iterdir():
                print(f"   - {item.name}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        if config is None:
            print("‚ùå Config.yml –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!")
            return False
            
        print("‚úÖ Config.yml —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {config_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        required_sections = {
            'morrowind_data_files_dir': '–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Morrowind',
            'language': '–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã', 
            'log': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
            'speech_to_text': '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)',
            'text_to_speech': '–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (TTS)',
            'llm': 'LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã',
            'event_bus': '–®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π',
            'rpc': 'RPC —Å–µ—Ä–≤–µ—Ä',
            'database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'player_database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞',
            'npc_database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ü–°',
            'npc_director': '–†–µ–∂–∏—Å—Å—ë—Ä –ù–ü–°',
            'npc_speaker': '–ì–æ–ª–æ—Å –ù–ü–°',
            'scene_instructions': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å—Ü–µ–Ω—ã'
        }
        
        missing_sections = []
        for section, description in required_sections.items():
            if section in config:
                print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –Ω–∞–π–¥–µ–Ω–∞ - {description}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
                if section == 'morrowind_data_files_dir':
                    data_dir = Path(config[section])
                    if data_dir.exists():
                        print(f"   üìÅ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Morrowind –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {data_dir}")
                    else:
                        print(f"   ‚ö†Ô∏è –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Morrowind –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_dir}")
                
                elif section == 'event_bus':
                    if 'host' in config[section] and 'port' in config[section]:
                        host = config[section]['host']
                        port = config[section]['port']
                        print(f"   üì° Event Bus: {host}:{port}")
                
                elif section == 'rpc':
                    if 'host' in config[section] and 'port' in config[section]:
                        host = config[section]['host']
                        port = config[section]['port']
                        print(f"   üîå RPC —Å–µ—Ä–≤–µ—Ä: {host}:{port}")
                
                elif section == 'log':
                    if all(field in config[section] for field in ['log_to_console', 'log_to_file', 'file_path']):
                        print(f"   üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        print(f"   ‚ö†Ô∏è –í —Å–µ–∫—Ü–∏–∏ log –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        
            else:
                print(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                missing_sections.append(section)
        
        if missing_sections:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_sections)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini API –∫–ª—é—á
        if 'llm' in config and 'system' in config['llm']:
            if 'google' in config['llm']['system']:
                api_key = config['llm']['system']['google'].get('api_key', '')
                if api_key and api_key != "–¢–í–û–ô_GEMINI_API_–ö–õ–Æ–ß_–ó–î–ï–°–¨":
                    print(f"‚úÖ Gemini API –∫–ª—é—á: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print("‚ö†Ô∏è Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
        if 'language' in config:
            lang = config['language']
            print(f"üåç –Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã: {lang}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫
        print("\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ logs –∏ data –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ config.yml
        root_dir = config_path.parent
        logs_dir = root_dir / 'logs'
        data_dir = root_dir / 'data'
        
        if not logs_dir.exists():
            logs_dir.mkdir()
            print("‚úÖ –ü–∞–ø–∫–∞ logs —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚úÖ –ü–∞–ø–∫–∞ logs –Ω–∞–π–¥–µ–Ω–∞")
            
        if not data_dir.exists():
            data_dir.mkdir()
            print("‚úÖ –ü–∞–ø–∫–∞ data —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚úÖ –ü–∞–ø–∫–∞ data –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scene_instructions.txt
        scene_file = data_dir / 'scene_instructions.txt'
        if not scene_file.exists():
            scene_file.touch()
            print("‚úÖ –§–∞–π–ª scene_instructions.txt —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚úÖ –§–∞–π–ª scene_instructions.txt –Ω–∞–π–¥–µ–Ω")
        
        print("\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
        
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò MORROWIND AI")
    print("=" * 50)
    
    success = check_config()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
    else:
        print("üí• –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô!")
        print("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    print("=" * 50)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
