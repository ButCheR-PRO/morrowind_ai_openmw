#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import signal
from aiohttp import web, ClientSession
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

class OpenMWBridge:
    def __init__(self):
        self.ai_server_url = "http://127.0.0.1:18080"
        
    async def handle_dialogue(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç OpenMW"""
        try:
            data = await request.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç OpenMW
            npc_name = data.get('npc_name', 'Unknown NPC')
            player_message = data.get('player_message', '')
            
            logger.info(f"üó£Ô∏è –î–∏–∞–ª–æ–≥: {npc_name} <- {player_message}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò –æ—Ç–≤–µ—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            ai_response = self.generate_ai_response(npc_name, player_message)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ OpenMW
            return web.json_response({
                'status': 'success',
                'ai_response': ai_response,
                'npc_name': npc_name
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return web.json_response({
                'status': 'error',
                'message': str(e)
            })

    def generate_ai_response(self, npc_name, player_message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ù–ü–°"""
        responses = [
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—É—Ç–Ω–∏–∫! –¢—ã —Å–∫–∞–∑–∞–ª: '{player_message}'. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø {npc_name}. –¢–≤–æ–∏ —Å–ª–æ–≤–∞ '{player_message}' –∑–≤—É—á–∞—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢—ã —É–ø–æ–º—è–Ω—É–ª '{player_message}' - —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            f"–•–º, '{player_message}'... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –¥—Ä—É–≥.",
        ]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        import random
        return random.choice(responses)

    async def handle_voice(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            data = await request.json()
            voice_text = data.get('voice_text', '')
            
            logger.info(f"üé§ –ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {voice_text}")
            
            return web.json_response({
                'status': 'success',
                'recognized_text': voice_text
            })
            
        except Exception as e:
            return web.json_response({
                'status': 'error', 
                'message': str(e)
            })

    async def handle_test(self, request):
        """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
        return web.json_response({
            'status': 'success',
            'message': 'HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'timestamp': asyncio.get_event_loop().time()
        })

async def create_app():
    bridge = OpenMWBridge()
    
    app = web.Application()
    app.router.add_post('/dialogue', bridge.handle_dialogue)
    app.router.add_post('/voice', bridge.handle_voice)
    app.router.add_get('/test', bridge.handle_test)
    
    return app

def signal_handler(signum, frame):
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    exit(0)

async def main():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üåâ –ó–∞–ø—É—Å–∫ OpenMW-AI HTTP –º–æ—Å—Ç–∞...")
    logger.info("üîó HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    
    app = await create_app()
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '127.0.0.1', 8080)
    await site.start()
    
    logger.info("‚úÖ HTTP –º–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üéÆ –¢–µ—Å—Ç–∏—Ä—É–π: http://127.0.0.1:8080/test")
    logger.info("üìû –î–∏–∞–ª–æ–≥–∏: POST http://127.0.0.1:8080/dialogue")
    
    try:
        while True:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP –º–æ—Å—Ç–∞...")
    finally:
        await runner.cleanup()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã HTTP –º–æ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
