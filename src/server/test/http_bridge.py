#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
============================================================================
Morrowind AI HTTP Bridge v1.2
–ú–æ—Å—Ç –º–µ–∂–¥—É OpenMW (—Ñ–∞–π–ª—ã) –∏ AI-—Å–µ—Ä–≤–µ—Ä–æ–º (HTTP/WebSocket)
============================================================================
"""

import os
import sys
import json
import time
import asyncio
import aiohttp
from threading import Thread
from pathlib import Path
import logging
from datetime import datetime

# –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–ë–õ–ï–ú–£ –° –õ–û–ì–ê–ú–ò - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏
def ensure_log_directory():
    # –ò–¥—ë–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º logs
    current_dir = Path(__file__).parent  # test/
    server_dir = current_dir.parent      # server/
    src_dir = server_dir.parent          # src/
    root_dir = src_dir.parent            # morrowind_ai_openmw/
    log_dir = root_dir / 'logs'
    
    log_dir.mkdir(parents=True, exist_ok=True)
    return log_dir

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_directory = ensure_log_directory()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(log_directory / 'http_bridge.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class MorrowindAIBridge:
    def __init__(self):
        self.config = {
            'ai_server_host': 'localhost',
            'ai_server_port': 9090,
            'http_server_port': 8080,
            # –ü—É—Ç–∏ –∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ
            'temp_dir': 'f:/Games/MorrowindFullrest/game/Data Files/ai_temp/',
            'request_file': 'f:/Games/MorrowindFullrest/game/Data Files/ai_temp/ai_request.json',
            'response_file': 'f:/Games/MorrowindFullrest/game/Data Files/ai_temp/ai_response.json',
            'signal_file': 'f:/Games/MorrowindFullrest/game/Data Files/ai_temp/ai_signal.txt',
            'check_interval': 0.5,
            'request_timeout': 30,
        }
        
        self.is_running = False
        self.processed_requests = set()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.ensure_temp_directory()
        
    def ensure_temp_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        temp_path = Path(self.config['temp_dir'])
        temp_path.mkdir(parents=True, exist_ok=True)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞: {temp_path.absolute()}")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç–∞"""
        logger.info("=" * 60)
        logger.info("üåâ MORROWIND AI BRIDGE –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...")
        logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_directory}")
        logger.info("=" * 60)
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = Thread(target=self.file_monitor_loop, daemon=True)
        monitor_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        try:
            asyncio.run(self.start_http_server())
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Å—Ç–∞"""
        self.is_running = False
        logger.info("üõë Morrowind AI Bridge –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def file_monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç OpenMW"""
        logger.info("üëÅÔ∏è –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –æ—Ç OpenMW...")
        logger.info(f"üìÇ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º: {self.config['temp_dir']}")
        
        while self.is_running:
            try:
                self.check_for_new_requests()
                time.sleep(self.config['check_interval'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ñ–∞–π–ª–æ–≤: {e}")
                time.sleep(1)
                
    def check_for_new_requests(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç OpenMW"""
        signal_file = self.config['signal_file']
        request_file = self.config['request_file']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(signal_file):
            return
            
        try:
            # –ß–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            with open(signal_file, 'r', encoding='utf-8') as f:
                signal_content = f.read().strip()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if signal_content in self.processed_requests:
                return
                
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞–ø—Ä–æ—Å–∞
            if not os.path.exists(request_file):
                logger.warning("–°–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–æ —Ñ–∞–π–ª –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                os.remove(signal_file)
                return
                
            with open(request_file, 'r', encoding='utf-8') as f:
                request_data = json.load(f)
                
            logger.info("=" * 50)
            logger.info("üì® –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–¢ OPENMW")
            logger.info(f"ID –∑–∞–ø—Ä–æ—Å–∞: {request_data.get('request_id', 'unknown')}")
            logger.info(f"–ù–ü–°: {request_data.get('npc_name', 'Unknown')}")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {request_data.get('message', '')}")
            logger.info("=" * 50)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä
            asyncio.run(self.send_to_ai_server(request_data))
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.processed_requests.add(signal_content)
            
            # –£–¥–∞–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.remove(signal_file)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if os.path.exists(signal_file):
                os.remove(signal_file)
                
    async def send_to_ai_server(self, request_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä"""
        ai_url = f"http://{self.config['ai_server_host']}:{self.config['ai_server_port']}/api/dialogue"
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'npc_name': request_data.get('npc_name', ''),
                    'message': request_data.get('message', ''),
                    'context': request_data.get('context', ''),
                    'language': request_data.get('language', 'ru'),
                    'game': 'morrowind',
                    'timestamp': request_data.get('timestamp', int(time.time()))
                }
                
                logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä: {ai_url}")
                
                async with session.post(
                    ai_url, 
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=self.config['request_timeout'])
                ) as response:
                    
                    if response.status == 200:
                        ai_response = await response.json()
                        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI-—Å–µ—Ä–≤–µ—Ä–∞")
                        await self.save_ai_response(ai_response, request_data)
                    else:
                        logger.error(f"‚ùå AI-—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status}")
                        await self.save_error_response(f"AI server error: {response.status}", request_data)
                        
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI-—Å–µ—Ä–≤–µ—Ä—É: {e}")
            await self.save_error_response(f"Connection error: {e}", request_data)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
            await self.save_error_response(f"Unexpected error: {e}", request_data)
            
    async def save_ai_response(self, ai_response, original_request):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç AI –¥–ª—è OpenMW"""
        response_data = {
            'request_id': original_request.get('request_id', ''),
            'npc_name': original_request.get('npc_name', ''),
            'ai_response': ai_response.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å'),
            'status': 'success',
            'timestamp': int(time.time()),
            'processing_time': ai_response.get('processing_time', 0)
        }
        
        response_file = self.config['response_file']
        
        try:
            with open(response_file, 'w', encoding='utf-8') as f:
                json.dump(response_data, f, ensure_ascii=False, indent=2)
                
            logger.info(f"üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è OpenMW: {response_file}")
            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {ai_response.get('response', '')[:100]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            
    async def save_error_response(self, error_message, original_request):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è OpenMW"""
        response_data = {
            'request_id': original_request.get('request_id', ''),
            'npc_name': original_request.get('npc_name', ''),
            'ai_response': f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {error_message}",
            'status': 'error',
            'error': error_message,
            'timestamp': int(time.time())
        }
        
        response_file = self.config['response_file']
        
        try:
            with open(response_file, 'w', encoding='utf-8') as f:
                json.dump(response_data, f, ensure_ascii=False, indent=2)
                
            logger.info(f"üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è OpenMW: {response_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")
            
    async def start_http_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        from aiohttp import web
        
        app = web.Application()
        
        app.router.add_get('/', self.handle_status)
        app.router.add_post('/api/dialogue', self.handle_dialogue_request)
        app.router.add_get('/api/status', self.handle_status)
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, 'localhost', self.config['http_server_port'])
        await site.start()
        
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.config['http_server_port']}")
        logger.info("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
        logger.info(f"   - GET  http://localhost:{self.config['http_server_port']}/")
        logger.info(f"   - POST http://localhost:{self.config['http_server_port']}/api/dialogue")
        logger.info(f"   - GET  http://localhost:{self.config['http_server_port']}/api/status")
        
        try:
            while self.is_running:
                await asyncio.sleep(1)
        finally:
            await runner.cleanup()
            
    async def handle_status(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞"""
        status = {
            'service': 'Morrowind AI Bridge',
            'version': '1.2',
            'status': 'running' if self.is_running else 'stopped',
            'uptime': int(time.time()),
            'processed_requests': len(self.processed_requests),
            'ai_server': f"{self.config['ai_server_host']}:{self.config['ai_server_port']}"
        }
        
        return web.json_response(status)
        
    async def handle_dialogue_request(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            data = await request.json()
            ai_response = await self.forward_to_ai_server(data)
            return web.json_response(ai_response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return web.json_response({'error': str(e)}, status=500)
            
    async def forward_to_ai_server(self, data):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ AI-—Å–µ—Ä–≤–µ—Ä"""
        ai_url = f"http://{self.config['ai_server_host']}:{self.config['ai_server_port']}/api/dialogue"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(ai_url, json=data) as response:
                return await response.json()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåâ Morrowind AI Bridge v1.2")
    print("=" * 40)
    
    bridge = MorrowindAIBridge()
    bridge.start()

if __name__ == "__main__":
    main()
