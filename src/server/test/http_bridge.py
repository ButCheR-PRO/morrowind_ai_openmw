#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import aiohttp
from aiohttp import web
import yaml
import logging
from pathlib import Path
import json
from datetime import datetime
import os
import socket
import struct
import uuid

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.yml"""
    config_path = Path(__file__).parent.parent.parent.parent / 'config.yml'
    
    if not config_path.exists():
        config_path = Path.cwd() / 'config.yml'
        if not config_path.exists():
            config_path = Path(__file__).parent.parent.parent / 'config.yml'
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            logging.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()

if config:
    HTTP_HOST = config.get("http_bridge", {}).get("host", "127.0.0.1")
    HTTP_PORT = config.get("http_bridge", {}).get("port", 8080)
    
    # AI-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ event bus –Ω–∞ –ø–æ—Ä—Ç—É 9090!
    AI_HOST = config.get("event_bus", {}).get("host", "127.0.0.1") 
    AI_PORT = config.get("event_bus", {}).get("port", 9090)
    AI_BASE_URL = f"tcp://{AI_HOST}:{AI_PORT}"
else:
    HTTP_HOST = "127.0.0.1"
    HTTP_PORT = 8080
    AI_HOST = "127.0.0.1"
    AI_PORT = 9090  # Event bus –ø–æ—Ä—Ç!
    AI_BASE_URL = f"tcp://{AI_HOST}:{AI_PORT}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AIEventBusClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI-—Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ event bus"""
    
    def __init__(self, host="127.0.0.1", port=9090):
        self.host = host
        self.port = port
        self.reader = None
        self.writer = None
        self.connected = False
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ event bus"""
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ AI event bus {self.host}:{self.port}...")
            self.reader, self.writer = await asyncio.open_connection(self.host, self.port)
            self.connected = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI event bus —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ event bus: {e}")
            self.connected = False
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç event bus"""
        if self.writer:
            self.writer.close()
            await self.writer.wait_closed()
        self.connected = False
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç AI event bus")
    
    async def send_message(self, message_type, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ event bus"""
        if not self.connected:
            if not await self.connect():
                return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ event bus
            message = {
                "id": str(uuid.uuid4()),
                "type": message_type,
                "timestamp": datetime.now().isoformat(),
                "data": data
            }
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
            json_data = json.dumps(message, ensure_ascii=False).encode('utf-8')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è + —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            length = struct.pack('!I', len(json_data))
            self.writer.write(length + json_data)
            await self.writer.drain()
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ '{message_type}' –≤ event bus")
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            response_length_data = await self.reader.read(4)
            if len(response_length_data) < 4:
                logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç event bus")
                return None
            
            response_length = struct.unpack('!I', response_length_data)[0]
            response_data = await self.reader.read(response_length)
            
            if len(response_data) < response_length:
                logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç event bus")
                return None
            
            response = json.loads(response_data.decode('utf-8'))
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç event bus: {response.get('type', 'unknown')}")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ event bus: {e}")
            self.connected = False
            return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç event bus
ai_client = AIEventBusClient(AI_HOST, AI_PORT)

routes = web.RouteTableDef()

@routes.get("/health")
async def health(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è HTTP –º–æ—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ event bus
    bus_status = "connected" if ai_client.connected else "disconnected"
    
    return web.json_response({
        "status": "healthy",
        "message": "HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": datetime.now().isoformat(),
        "uptime": True,
        "config": {
            "host": HTTP_HOST,
            "port": HTTP_PORT,
            "ai_server": AI_BASE_URL,
            "event_bus_status": bus_status
        }
    })

@routes.get("/test")
async def test(request):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ event bus
    test_result = await ai_client.send_message("ping", {"test": True})
    bus_working = test_result is not None
    
    return web.json_response({
        "status": "success", 
        "message": "HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": datetime.now().isoformat(),
        "client_info": {
            "remote": request.remote,
            "user_agent": request.headers.get("User-Agent"),
            "query_params": dict(request.query)
        },
        "server_info": {
            "host": HTTP_HOST,
            "port": HTTP_PORT,
            "pid": os.getpid(),
            "event_bus_working": bus_working
        }
    })

@routes.post("/dialogue")
async def dialogue(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ù–ü–° —á–µ—Ä–µ–∑ event bus"""
    try:
        payload = await request.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return web.json_response(
            {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, status=400
        )

    session_id = payload.get("session_id")
    text = payload.get("text")
    npc_name = payload.get("npc_name", "–ù–ü–°")
    
    if not session_id or not text:
        return web.json_response(
            {"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç session_id –∏–ª–∏ text"}, status=400
        )

    logger.info(f"üó£Ô∏è –î–∏–∞–ª–æ–≥: {npc_name} <- {text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ event bus
    try:
        response = await ai_client.send_message("dialogue", {
            "session_id": session_id,
            "text": text,
            "npc_name": npc_name,
            "context": "morrowind_dialogue",
            "language": "ru"
        })
        
        if response and response.get("status") == "success":
            ai_response = response.get("data", {}).get("response", "–ù–ü–° –∑–∞–¥—É–º–∞–ª—Å—è...")
            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI —á–µ—Ä–µ–∑ event bus")
        else:
            logger.warning("‚ö†Ô∏è Event bus –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            ai_response = f"–ò–∑–≤–∏–Ω–∏, {npc_name} —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—Ç –æ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö '{text}'."
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–Ω–∏—è —Å AI —á–µ—Ä–µ–∑ event bus: {e}")
        ai_response = f"–ò–∑–≤–∏–Ω–∏, {npc_name} —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    response_data = {
        "status": "success",
        "ai_response": ai_response,
        "npc_name": npc_name,
        "timestamp": datetime.now().isoformat(),
        "method": "event_bus"
    }
    
    logger.info(f"üì§ –û—Ç–≤–µ—Ç: {ai_response[:50]}...")
    return web.json_response(response_data)

@routes.post("/voice")
async def voice(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ event bus"""
    try:
        if request.content_type == 'application/json':
            payload = await request.json()
            text = payload.get("text", "")
            logger.info(f"üé§ –ì–æ–ª–æ—Å (JSON): {text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ event bus –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response = await ai_client.send_message("voice", {
                "text": text,
                "format": "json",
                "language": "ru"
            })
            
            return web.json_response({
                "status": "success",
                "recognized_text": text,
                "method": "event_bus_json",
                "ai_processed": response is not None
            })
            
        elif request.content_type.startswith('audio/'):
            audio_data = await request.read()
            logger.info(f"üé§ –ì–æ–ª–æ—Å (–∞—É–¥–∏–æ): {len(audio_data)} –±–∞–π—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ event bus
            response = await ai_client.send_message("voice_audio", {
                "audio_data": audio_data.hex(),  # –ö–æ–¥–∏—Ä—É–µ–º –≤ hex
                "format": "binary",
                "language": "ru"
            })
            
            recognized_text = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ event bus..."
            if response and response.get("data"):
                recognized_text = response["data"].get("text", recognized_text)
            
            return web.json_response({
                "status": "success", 
                "recognized_text": recognized_text,
                "method": "event_bus_audio",
                "size": len(audio_data)
            })
        else:
            return web.json_response(
                {"status": "error", "message": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"}, 
                status=400
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        return web.json_response(
            {"status": "error", "message": str(e)}, status=500
        )

@routes.post("/generate")
async def generate(request):
    """–ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        payload = await request.json()
        prompt = payload.get("prompt", payload.get("text", ""))
        
        if not prompt:
            return web.json_response(
                {"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç prompt –∏–ª–∏ text"}, status=400
            )
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {prompt[:50]}...")
        
        response = await ai_client.send_message("generate", {
            "prompt": prompt,
            "max_tokens": payload.get("max_tokens", 150),
            "temperature": payload.get("temperature", 0.7),
            "language": "ru"
        })
        
        if response and response.get("status") == "success":
            generated_text = response.get("data", {}).get("text", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å...")
        else:
            generated_text = f"–û—Ç–≤–µ—Ç –Ω–∞ '{prompt[:30]}...' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
        
        return web.json_response({
            "status": "success",
            "generated_text": generated_text,
            "method": "event_bus",
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return web.json_response(
            {"status": "error", "message": str(e)}, status=500
        )

async def cleanup_on_shutdown(app):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    await ai_client.disconnect()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ HTTP –º–æ—Å—Ç–∞"""
    logger.info("üåâ –ó–∞–ø—É—Å–∫ OpenMW-AI HTTP –º–æ—Å—Ç–∞...")
    
    if config:
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.yml")
    else:
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    logger.info("üåâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –º–æ—Å—Ç–∞")
    logger.info(f"üì° AI event bus: {AI_BASE_URL}")
    logger.info(f"üîå HTTP —Å–µ—Ä–≤–µ—Ä: {HTTP_HOST}:{HTTP_PORT}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.add_routes(routes)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏
    app.on_cleanup.append(cleanup_on_shutdown)
    
    logger.info("‚úÖ HTTP –º–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"üéÆ –¢–µ—Å—Ç: http://{HTTP_HOST}:{HTTP_PORT}/test")
    logger.info(f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: http://{HTTP_HOST}:{HTTP_PORT}/health")
    logger.info(f"üìû –î–∏–∞–ª–æ–≥–∏: POST http://{HTTP_HOST}:{HTTP_PORT}/dialogue")
    logger.info(f"üé§ –ì–æ–ª–æ—Å: POST http://{HTTP_HOST}:{HTTP_PORT}/voice")
    logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: POST http://{HTTP_HOST}:{HTTP_PORT}/generate")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É 8080!
    web.run_app(app, host=HTTP_HOST, port=HTTP_PORT)

if __name__ == "__main__":
    main()
