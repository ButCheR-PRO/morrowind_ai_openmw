#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import signal
import sys
import yaml
import logging
import os
from pathlib import Path
from aiohttp import web, ClientSession
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('http_bridge.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class OpenMWBridge:
    def __init__(self, config=None):
        self.config = config or {}
        self.ai_server_url = self.config.get('ai_server_url', "http://127.0.0.1:18080")
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.rpc_config = self.config.get('rpc', {})
        self.host = self.rpc_config.get('host', '127.0.0.1')
        self.port = self.rpc_config.get('port', 8080)
        
        logger.info(f"üåâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –º–æ—Å—Ç–∞")
        logger.info(f"üì° –°–µ—Ä–≤–µ—Ä –ò–ò: {self.ai_server_url}")
        logger.info(f"üîå HTTP —Å–µ—Ä–≤–µ—Ä: {self.host}:{self.port}")
    
    async def handle_dialogue(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç OpenMW"""
        try:
            data = await request.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç OpenMW
            npc_name = data.get('npc_name', 'Unknown NPC')
            player_message = data.get('player_message', '')
            context = data.get('context', {})
            
            logger.info(f"üó£Ô∏è –î–∏–∞–ª–æ–≥: {npc_name} <- {player_message}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò –æ—Ç–≤–µ—Ç
            ai_response = await self.generate_ai_response(npc_name, player_message, context)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ OpenMW
            response_data = {
                'status': 'success',
                'ai_response': ai_response,
                'npc_name': npc_name,
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"üì§ –û—Ç–≤–µ—Ç: {ai_response[:100]}...")
            return web.json_response(response_data)
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            return web.json_response({
                'status': 'error',
                'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON'
            }, status=400)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return web.json_response({
                'status': 'error',
                'message': str(e)
            }, status=500)

    async def generate_ai_response(self, npc_name, player_message, context=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ù–ü–° —á–µ—Ä–µ–∑ –ò–ò —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò
            async with ClientSession() as session:
                payload = {
                    'npc_name': npc_name,
                    'player_message': player_message,
                    'context': context or {},
                    'language': self.config.get('language', 'ru')
                }
                
                async with session.post(
                    f"{self.ai_server_url}/generate",
                    json=payload,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å.')
                    else:
                        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ò–ò –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        return self.get_fallback_response(npc_name, player_message)
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò")
            return self.get_fallback_response(npc_name, player_message)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return self.get_fallback_response(npc_name, player_message)

    def get_fallback_response(self, npc_name, player_message):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        responses = [
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—É—Ç–Ω–∏–∫! –¢—ã —Å–∫–∞–∑–∞–ª: '{player_message}'. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø {npc_name}. –¢–≤–æ–∏ —Å–ª–æ–≤–∞ '{player_message}' –∑–≤—É—á–∞—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢—ã —É–ø–æ–º—è–Ω—É–ª '{player_message}' - —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            f"–•–º, '{player_message}'... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –¥—Ä—É–≥.",
            f"–ò–∑–≤–∏–Ω–∏, {npc_name} —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—Ç –æ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö '{player_message}'.",
        ]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        import random
        return random.choice(responses)

    async def handle_voice(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
            content_type = request.headers.get('Content-Type', '')
            
            if content_type.startswith('application/json'):
                data = await request.json()
                voice_text = data.get('voice_text', '')
                logger.info(f"üé§ –ì–æ–ª–æ—Å (JSON): {voice_text}")
                
                return web.json_response({
                    'status': 'success',
                    'recognized_text': voice_text,
                    'method': 'json'
                })
                
            elif content_type.startswith('audio/'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                audio_data = await request.read()
                logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ: {len(audio_data)} –±–∞–π—Ç")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VOSK
                recognized_text = await self.process_audio_with_vosk(audio_data)
                
                return web.json_response({
                    'status': 'success',
                    'recognized_text': recognized_text,
                    'method': 'audio',
                    'audio_size': len(audio_data)
                })
            else:
                return web.json_response({
                    'status': 'error',
                    'message': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Content-Type: {content_type}'
                }, status=400)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            return web.json_response({
                'status': 'error', 
                'message': str(e)
            }, status=500)

    async def process_audio_with_vosk(self, audio_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é VOSK"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è VOSK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            logger.info("ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ VOSK...")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            await asyncio.sleep(0.1)
            return "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ VOSK: {e}")
            return "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"

    async def handle_health(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            'status': 'healthy',
            'message': 'HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'timestamp': datetime.now().isoformat(),
            'uptime': self.running,
            'config': {
                'host': self.host,
                'port': self.port,
                'ai_server': self.ai_server_url
            }
        })

    async def handle_test(self, request):
        """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        query_params = dict(request.query)
        headers = dict(request.headers)
        
        return web.json_response({
            'status': 'success',
            'message': 'HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'timestamp': datetime.now().isoformat(),
            'client_info': {
                'remote': request.remote,
                'user_agent': headers.get('User-Agent', 'Unknown'),
                'query_params': query_params
            },
            'server_info': {
                'host': self.host,
                'port': self.port,
                'pid': os.getpid()
            }
        })

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.yml"""
    config_path = Path('config.yml')
    
    # –ò—â–µ–º config.yml –≤ —Ç–µ–∫—É—â–µ–π –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    if not config_path.exists():
        for parent in Path.cwd().parents:
            potential_config = parent / 'config.yml'
            if potential_config.exists():
                config_path = potential_config
                break
        else:
            logger.warning("‚ö†Ô∏è config.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {}
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config or {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

async def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    config = load_config()
    bridge = OpenMWBridge(config)
    
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/dialogue', bridge.handle_dialogue)
    app.router.add_post('/voice', bridge.handle_voice)
    app.router.add_get('/test', bridge.handle_test)
    app.router.add_get('/health', bridge.handle_health)
    
    # CORS middleware
    @web.middleware
    async def cors_handler(request, handler):
        response = await handler(request)
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        return response
    
    app.middlewares.append(cors_handler)
    
    return app, bridge

def setup_signal_handlers(bridge):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    def signal_handler(signum, frame):
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        bridge.running = False
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üåâ –ó–∞–ø—É—Å–∫ OpenMW-AI HTTP –º–æ—Å—Ç–∞...")
    
    try:
        app, bridge = await create_app()
        setup_signal_handlers(bridge)
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, bridge.host, bridge.port)
        await site.start()
        
        bridge.running = True
        
        logger.info("‚úÖ HTTP –º–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üéÆ –¢–µ—Å—Ç: http://{bridge.host}:{bridge.port}/test")
        logger.info(f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: http://{bridge.host}:{bridge.port}/health")
        logger.info(f"üìû –î–∏–∞–ª–æ–≥–∏: POST http://{bridge.host}:{bridge.port}/dialogue")
        logger.info(f"üé§ –ì–æ–ª–æ—Å: POST http://{bridge.host}:{bridge.port}/voice")
        
        try:
            while bridge.running:
                await asyncio.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP –º–æ—Å—Ç–∞...")
            await runner.cleanup()
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã HTTP –º–æ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)
