#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import aiohttp
from aiohttp import web
import yaml
import logging
from pathlib import Path
import json
from datetime import datetime
import os
import uuid

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.yml"""
    config_path = Path(__file__).parent.parent.parent.parent / 'config.yml'
    
    if not config_path.exists():
        config_path = Path.cwd() / 'config.yml'
        if not config_path.exists():
            config_path = Path(__file__).parent.parent.parent / 'config.yml'
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            logging.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()

if config:
    HTTP_HOST = config.get("http_bridge", {}).get("host", "127.0.0.1")
    HTTP_PORT = config.get("http_bridge", {}).get("port", 8080)
    
    # AI-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ event bus
    AI_HOST = config.get("event_bus", {}).get("host", "127.0.0.1") 
    AI_PORT = config.get("event_bus", {}).get("port", 9090)
    AI_BASE_URL = f"tcp://{AI_HOST}:{AI_PORT}"
else:
    HTTP_HOST = "127.0.0.1"
    HTTP_PORT = 8080
    AI_HOST = "127.0.0.1"
    AI_PORT = 9090
    AI_BASE_URL = f"tcp://{AI_HOST}:{AI_PORT}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AIEventBusClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI-—Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ event bus (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    
    def __init__(self, host="127.0.0.1", port=9090):
        self.host = host
        self.port = port
        self.reader = None
        self.writer = None
        self.connected = False
        self.event_id = 1  # –°—á—ë—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ event bus"""
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ AI event bus {self.host}:{self.port}...")
            self.reader, self.writer = await asyncio.open_connection(self.host, self.port)
            self.connected = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI event bus —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ OpenMW –∫–ª–∏–µ–Ω—Ç
            await self.send_init_event()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ event bus: {e}")
            self.connected = False
            return False
    
    async def send_init_event(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ OpenMW –∫–ª–∏–µ–Ω—Ç"""
        try:
            init_event = {
                "event_id": self.event_id,
                "response_to_event_id": None,
                "data": {
                    "type": "client_init",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    "client_info": {
                        "name": "HTTP_Bridge_Client",
                        "version": "1.0.0",
                        "platform": "HTTP"
                    }
                }
            }
            
            await self._send_raw_message(init_event)
            self.event_id += 1
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç event bus"""
        if self.writer:
            self.writer.close()
            await self.writer.wait_closed()
        self.connected = False
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç AI event bus")
    
    async def _send_raw_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—ã—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self.connected:
            raise Exception("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ event bus")
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        json_data = json.dumps(message, ensure_ascii=False).encode('utf-8')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
        data_with_newline = json_data + b'\n'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        self.writer.write(data_with_newline)
        await self.writer.drain()
    
    async def send_dialogue_request(self, session_id, text, npc_name="–ù–ü–°"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è AI-—Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.connected:
            if not await self.connect():
                return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç AI-—Å–µ—Ä–≤–µ—Ä
            dialogue_event = {
                "event_id": self.event_id,
                "response_to_event_id": None,
                "data": {
                    "type": "npc_dialogue_request",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                    "session_id": session_id,
                    "player_message": text,
                    "npc_name": npc_name,
                    "context": {
                        "location": "unknown",
                        "mood": "neutral",
                        "language": "ru"
                    }
                }
            }
            
            await self._send_raw_message(dialogue_event)
            self.event_id += 1
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ (event_id: {dialogue_event['event_id']})")
            
            # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                response = await asyncio.wait_for(self._read_response(), timeout=10.0)
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {response.get('data', {}).get('type', 'unknown')}")
                return response
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            self.connected = False
            return None
    
    async def _read_response(self):
        """–ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
            response_line = await self.reader.readline()
            
            if not response_line:
                logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç event bus")
                return None
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
            response_text = response_line.decode('utf-8').strip()
            response = json.loads(response_text)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç event bus
ai_client = AIEventBusClient(AI_HOST, AI_PORT)

routes = web.RouteTableDef()

@routes.get("/health")
async def health(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è HTTP –º–æ—Å—Ç–∞"""
    bus_status = "connected" if ai_client.connected else "disconnected"
    
    return web.json_response({
        "status": "healthy",
        "message": "HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": datetime.now().isoformat(),
        "uptime": True,
        "config": {
            "host": HTTP_HOST,
            "port": HTTP_PORT,
            "ai_server": AI_BASE_URL,
            "event_bus_status": bus_status
        }
    })

@routes.get("/test")
async def test(request):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π event bus"""
    logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ event bus
    if not ai_client.connected:
        bus_working = await ai_client.connect()
    else:
        bus_working = True
    
    return web.json_response({
        "status": "success", 
        "message": "HTTP –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": datetime.now().isoformat(),
        "client_info": {
            "remote": request.remote,
            "user_agent": request.headers.get("User-Agent"),
            "query_params": dict(request.query)
        },
        "server_info": {
            "host": HTTP_HOST,
            "port": HTTP_PORT,
            "pid": os.getpid(),
            "event_bus_working": bus_working
        }
    })

@routes.post("/dialogue")
async def dialogue(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ù–ü–° —á–µ—Ä–µ–∑ event bus (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    try:
        payload = await request.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return web.json_response(
            {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, status=400
        )

    session_id = payload.get("session_id")
    text = payload.get("text")
    npc_name = payload.get("npc_name", "–ù–ü–°")
    
    if not session_id or not text:
        return web.json_response(
            {"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç session_id –∏–ª–∏ text"}, status=400
        )

    logger.info(f"üó£Ô∏è –î–∏–∞–ª–æ–≥: {npc_name} <- {text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ event bus –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    try:
        response = await ai_client.send_dialogue_request(session_id, text, npc_name)
        
        if response and response.get("data"):
            response_data = response["data"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if response_data.get("type") == "npc_dialogue_response":
                ai_response = response_data.get("npc_message", "–ù–ü–° –∑–∞–¥—É–º–∞–ª—Å—è...")
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI —á–µ—Ä–µ–∑ event bus")
            else:
                ai_response = f"–ò–∑–≤–∏–Ω–∏, {npc_name} —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—Ç –æ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö '{text}'."
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_data.get('type')}")
        else:
            logger.warning("‚ö†Ô∏è Event bus –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            ai_response = f"–ò–∑–≤–∏–Ω–∏, {npc_name} —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—Ç –æ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö '{text}'."
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–Ω–∏—è —Å AI —á–µ—Ä–µ–∑ event bus: {e}")
        ai_response = f"–ò–∑–≤–∏–Ω–∏, {npc_name} —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    response_data = {
        "status": "success",
        "ai_response": ai_response,
        "npc_name": npc_name,
        "timestamp": datetime.now().isoformat(),
        "method": "event_bus"
    }
    
    logger.info(f"üì§ –û—Ç–≤–µ—Ç: {ai_response[:50]}...")
    return web.json_response(response_data)

@routes.post("/voice")
async def voice(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        if request.content_type == 'application/json':
            payload = await request.json()
            text = payload.get("text", "")
            logger.info(f"üé§ –ì–æ–ª–æ—Å (JSON): {text}")
            
            return web.json_response({
                "status": "success",
                "recognized_text": text,
                "method": "json"
            })
            
        elif request.content_type.startswith('audio/'):
            audio_data = await request.read()
            logger.info(f"üé§ –ì–æ–ª–æ—Å (–∞—É–¥–∏–æ): {len(audio_data)} –±–∞–π—Ç")
            
            return web.json_response({
                "status": "success", 
                "recognized_text": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ VOSK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ",
                "method": "audio",
                "size": len(audio_data)
            })
        else:
            return web.json_response(
                {"status": "error", "message": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"}, 
                status=400
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        return web.json_response(
            {"status": "error", "message": str(e)}, status=500
        )

async def cleanup_on_shutdown(app):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    await ai_client.disconnect()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ HTTP –º–æ—Å—Ç–∞"""
    logger.info("üåâ –ó–∞–ø—É—Å–∫ OpenMW-AI HTTP –º–æ—Å—Ç–∞...")
    
    if config:
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.yml")
    else:
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    logger.info("üåâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –º–æ—Å—Ç–∞")
    logger.info(f"üì° AI event bus: {AI_BASE_URL}")
    logger.info(f"üîå HTTP —Å–µ—Ä–≤–µ—Ä: {HTTP_HOST}:{HTTP_PORT}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.add_routes(routes)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏
    app.on_cleanup.append(cleanup_on_shutdown)
    
    logger.info("‚úÖ HTTP –º–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"üéÆ –¢–µ—Å—Ç: http://{HTTP_HOST}:{HTTP_PORT}/test")
    logger.info(f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: http://{HTTP_HOST}:{HTTP_PORT}/health")
    logger.info(f"üìû –î–∏–∞–ª–æ–≥–∏: POST http://{HTTP_HOST}:{HTTP_PORT}/dialogue")
    logger.info(f"üé§ –ì–æ–ª–æ—Å: POST http://{HTTP_HOST}:{HTTP_PORT}/voice")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host=HTTP_HOST, port=HTTP_PORT)

if __name__ == "__main__":
    main()
