#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import yaml
import json
import wave
import tempfile
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_path = Path('config.yml')
    
    # –ò—â–µ–º config.yml –≤ —Ç–µ–∫—É—â–µ–π –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    if not config_path.exists():
        for parent in Path.cwd().parents:
            potential_config = parent / 'config.yml'
            if potential_config.exists():
                config_path = potential_config
                break
        else:
            logger.warning("‚ö†Ô∏è config.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config or {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

def check_vosk_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VOSK"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É VOSK...")
    
    try:
        import vosk
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ VOSK –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if hasattr(vosk, '__version__'):
            print(f"üì¶ –í–µ—Ä—Å–∏—è VOSK: {vosk.__version__}")
        
        return vosk
    except ImportError as e:
        print("‚ùå VOSK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VOSK: pip install vosk")
        print(f"üìÑ –û—à–∏–±–∫–∞: {e}")
        return None

def find_vosk_model(config):
    """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ VOSK"""
    print("üîç –ò—â–µ–º –º–æ–¥–µ–ª—å VOSK...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    vosk_config = config.get('vosk', {})
    model_path_from_config = vosk_config.get('model_path')
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏
    search_paths = []
    
    if model_path_from_config:
        search_paths.append(Path(model_path_from_config))
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
    search_paths.extend([
        Path("vosk-model-small-ru-0.22"),
        Path("vosk-model-ru-0.22"),
        Path("models/vosk-model-small-ru-0.22"),
        Path("models/vosk-model-ru-0.22"),
        Path("../models/vosk-model-small-ru-0.22"),
        Path("../models/vosk-model-ru-0.22"),
        Path("vosk-model"),
        Path("models/vosk-model")
    ])
    
    for model_path in search_paths:
        print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º: {model_path}")
        if model_path.exists() and model_path.is_dir():
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_path}")
            return model_path
    
    print("‚ùå –ú–æ–¥–µ–ª—å VOSK –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    print("üí° –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å: https://alphacephei.com/vosk/models")
    print("üìÅ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: vosk-model-small-ru-0.22")
    return None

def check_model_structure(model_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏: {model_path}")
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –≤ –º–æ–¥–µ–ª–∏ VOSK
    required_items = [
        'am',           # Acoustic model
        'graph',        # Graph
        'ivector',      # Ivector extractor
        'conf',         # Configuration
    ]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    optional_items = [
        'phones.txt',   # Phones (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö)
        'words.txt'     # Words (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª—è—Ö)
    ]
    
    missing_items = []
    found_items = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for item_name in required_items:
        item_path = model_path / item_name
        if item_path.exists():
            if item_path.is_dir():
                files_count = len(list(item_path.iterdir()))
                print(f"   ‚úÖ –ü–∞–ø–∫–∞ '{item_name}' –Ω–∞–π–¥–µ–Ω–∞ ({files_count} —Ñ–∞–π–ª–æ–≤)")
            else:
                file_size = item_path.stat().st_size
                print(f"   ‚úÖ –§–∞–π–ª '{item_name}' –Ω–∞–π–¥–µ–Ω ({file_size} –±–∞–π—Ç)")
            found_items.append(item_name)
        else:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {item_name}")
            missing_items.append(item_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for item_name in optional_items:
        item_path = model_path / item_name
        if item_path.exists():
            if item_path.is_dir():
                files_count = len(list(item_path.iterdir()))
                print(f"   ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ '{item_name}' –Ω–∞–π–¥–µ–Ω–∞ ({files_count} —Ñ–∞–π–ª–æ–≤)")
            else:
                file_size = item_path.stat().st_size
                print(f"   ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª '{item_name}' –Ω–∞–π–¥–µ–Ω ({file_size} –±–∞–π—Ç)")
        else:
            print(f"   ‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {item_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
    try:
        total_size = sum(f.stat().st_size for f in model_path.rglob('*') if f.is_file())
        size_mb = total_size / (1024 * 1024)
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {size_mb:.1f} –ú–ë")
        
        if size_mb < 10:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–π")
        elif size_mb > 2000:
            print("üíæ –≠—Ç–æ –±–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å, –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è")
        else:
            print("‚úÖ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {e}")
    
    if missing_items:
        print(f"‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è!")
        print(f"üí• –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(missing_items)}")
        print("üí° –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Å–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å")
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç phones.txt, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
        if not (model_path / 'phones.txt').exists():
            print("üí° –§–∞–π–ª phones.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π VOSK")
        return True

def test_vosk_loading(vosk_module, model_path, sample_rate=16000):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ VOSK"""
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
    print(f"üìÅ –ü—É—Ç—å: {model_path}")
    print(f"üéµ –ß–∞—Å—Ç–æ—Ç–∞: {sample_rate} Hz")
    
    try:
        print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å VOSK...")
        model = vosk_module.Model(str(model_path))
        print("‚úÖ –ú–æ–¥–µ–ª—å VOSK –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        print("‚è≥ –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å...")
        recognizer = vosk_module.KaldiRecognizer(model, sample_rate)
        recognizer.SetWords(True)  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–∞—Ö
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        print(f"   üéµ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {sample_rate} Hz")
        print(f"   üß† –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é")
        
        return model, recognizer
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å")
        print("   - –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è VOSK")
        print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏")
        return None, None

def test_recognition(vosk_module, recognizer, sample_rate=16000):
    """–¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º –∞—É–¥–∏–æ"""
    print("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ (—Ç–∏—à–∏–Ω–∞)
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ...")
        
        duration = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞
        samples = int(sample_rate * duration)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–∏—à–∏–Ω—ã (–Ω—É–ª–∏)
        import array
        audio_data = array.array('h', [0] * samples)  # 16-bit integers
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        audio_bytes = audio_data.tobytes()
        
        print(f"üéµ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ: {len(audio_bytes)} –±–∞–π—Ç, {duration}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å...")
        
        # –ü–æ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç—è–º–∏
        chunk_size = 4096
        results = []
        
        for i in range(0, len(audio_bytes), chunk_size):
            chunk = audio_bytes[i:i + chunk_size]
            
            if recognizer.AcceptWaveform(chunk):
                result = json.loads(recognizer.Result())
                results.append(result)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = json.loads(recognizer.FinalResult())
        results.append(final_result)
        
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if result.get('text'):
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: '{result['text']}'")
            else:
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: (–ø—É—Å—Ç–æ–π)")
        
        print("‚úÖ –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return False

def test_vosk():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VOSK"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VOSK")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É VOSK
    print(f"\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò")
    vosk_module = check_vosk_installation()
    if not vosk_module:
        return False
    
    # 2. –ò—â–µ–º –º–æ–¥–µ–ª—å
    print(f"\n2Ô∏è‚É£ –ü–û–ò–°–ö –ú–û–î–ï–õ–ò")
    model_path = find_vosk_model(config)
    if not model_path:
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò")
    if not check_model_structure(model_path):
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    print(f"\n4Ô∏è‚É£ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò")
    vosk_config = config.get('vosk', {})
    sample_rate = vosk_config.get('sample_rate', 16000)
    
    model, recognizer = test_vosk_loading(vosk_module, model_path, sample_rate)
    if not model or not recognizer:
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    print(f"\n5Ô∏è‚É£ –¢–ï–°–¢ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
    if not test_recognition(vosk_module, recognizer, sample_rate):
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = test_vosk()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ VOSK –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print("üé§ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ä–µ—á–∏")
        else:
            print("üí• –ü–†–û–ë–õ–ï–ú–´ –° VOSK!")
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        print("=" * 50)
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 2

if __name__ == "__main__":
    sys.exit(main())
