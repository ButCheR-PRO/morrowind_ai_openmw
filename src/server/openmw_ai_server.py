#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import aiohttp
from aiohttp import web
import json
import logging
from datetime import datetime
import google.generativeai as genai
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

class OpenMWAIServer:
    def __init__(self, config_path="../../config.yml"):
        self.config = self.load_config(config_path)
        self.setup_gemini()
        
    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config_path}")
            return config
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return {}
    
    def setup_gemini(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Gemini"""
        try:
            api_key = self.config.get('llm', {}).get('system', {}).get('google', {}).get('api_key')
            if not api_key:
                raise ValueError("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
                
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            logger.info("‚úÖ Google Gemini –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini: {e}")
            self.model = None

    async def generate_ai_response(self, user_text, npc_name="–ù–ü–°"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini AI"""
        if not self.model:
            return "–ò–∑–≤–∏–Ω–∏, –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        try:
            prompt = f"""
–¢—ã - {npc_name} –∏–∑ –∏–≥—Ä—ã Morrowind. 
–ò–≥—Ä–æ–∫ —Å–∫–∞–∑–∞–ª: "{user_text}"
–û—Ç–≤–µ—Ç—å –∫–∞–∫ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Ç–µ–º–µ.
–ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å—Ç–∏–ª—å —Ñ—ç–Ω—Ç–µ–∑–∏.
"""
            
            response = await asyncio.get_event_loop().run_in_executor(
                None, self.model.generate_content, prompt
            )
            
            ai_response = response.text.strip()
            logger.info(f"ü§ñ Gemini –æ—Ç–≤–µ—Ç–∏–ª: {ai_response[:100]}...")
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
            return f"*{npc_name} –∑–∞–¥—É–º—á–∏–≤–æ –º–æ–ª—á–∏—Ç*"

    async def handle_root(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return web.Response(text="""
ü§ñ OpenMW AI Server v1.0
========================
–°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç
Gemini AI: –ì–æ—Ç–æ–≤
–í—Ä–µ–º—è: %s

–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- GET  /api/status
- POST /api/dialogue
""" % datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    async def handle_status(self, request):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            "status": "ready",
            "server": "OpenMW AI Server v1.0",
            "gemini_available": self.model is not None,
            "timestamp": datetime.now().isoformat(),
            "endpoints": ["/api/status", "/api/dialogue"]
        }
        return web.json_response(status)

    async def handle_dialogue(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            data = await request.json()
            user_text = data.get('text', '').strip()
            npc_name = data.get('npc_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ù–ü–°')
            session_id = data.get('session_id', 'default')
            
            if not user_text:
                return web.json_response(
                    {"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}, 
                    status=400
                )
            
            logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç {session_id}: {user_text}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
            ai_response = await self.generate_ai_response(user_text, npc_name)
            
            result = {
                "status": "success",
                "ai_response": ai_response,
                "npc_name": npc_name,
                "session_id": session_id,
                "timestamp": datetime.now().isoformat()
            }
            
            logger.info(f"üì• –û—Ç–≤–µ—Ç –¥–ª—è {session_id}: {ai_response[:50]}...")
            return web.json_response(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return web.json_response(
                {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, 
                status=500
            )

    async def start_server(self, host='127.0.0.1', port=8080):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        app = web.Application()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_get('/', self.handle_root)
        app.router.add_get('/api/status', self.handle_status)
        app.router.add_post('/api/dialogue', self.handle_dialogue)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é OpenMW AI Server...")
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä: http://{host}:{port}")
        logger.info(f"üîó –°—Ç–∞—Ç—É—Å: http://{host}:{port}/api/status")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        logger.info("‚úÖ OpenMW AI Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(3600)  # –°–ø–∏–º —á–∞—Å
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...")
        finally:
            await runner.cleanup()

def main():
    try:
        server = OpenMWAIServer()
        asyncio.run(server.start_server())
    except Exception as e:
        logger.error(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
